<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Rodrigo Dumont</title>
    <link>http://rodrigodumont.com/post/</link>
    <description>Recent content in Posts on Rodrigo Dumont</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright Â© 2017 Rodrigo Dumont</copyright>
    <lastBuildDate>Fri, 10 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://rodrigodumont.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Profile Go micro-services in Kubernetes with pprof</title>
      <link>http://rodrigodumont.com/2017/11/10/profile-go-micro-services-in-kubernetes-with-pprof/</link>
      <pubDate>Fri, 10 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://rodrigodumont.com/2017/11/10/profile-go-micro-services-in-kubernetes-with-pprof/</guid>
      <description>One of Go&amp;rsquo;s most life-saving features is its native profiling tool, pprof. It enables you to instrument your code in order to discover problems related to performance, concurrency and memory usage.
I&amp;rsquo;ve read a few articles on how to set up the instrumentation, run the tool and analyze its results, but the examples usually work on your machine. Using it on code that is deployed on a Kubernetes cluster takes a few more steps, and this is how I did it.</description>
    </item>
    
    <item>
      <title>Comparing two objects: how hard can it be?</title>
      <link>http://rodrigodumont.com/2014/10/29/comparing-two-objects-how-hard-can-it-be/</link>
      <pubDate>Wed, 29 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rodrigodumont.com/2014/10/29/comparing-two-objects-how-hard-can-it-be/</guid>
      <description>TL;DR: Comparing the values of simple objects of unknown types in .NET can be a pain. Here is the story of how I achieved it (and the code!).
This week I had to implement a thing that saves settings for, well, something. Each setting should be saved individually, so all I had as input was the key (a string) and the value (an object). I had to treat the value as object because, coming from JSON, it could be anything, from a number (integer or not), string, date or boolean to an arbitrary map or array.</description>
    </item>
    
    <item>
      <title>Fixing Tortoise Git installation after Windows 8.1 upgrade</title>
      <link>http://rodrigodumont.com/2013/12/17/fixing-tortoise-git-installation-after-windows-8-1-upgrade/</link>
      <pubDate>Tue, 17 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rodrigodumont.com/2013/12/17/fixing-tortoise-git-installation-after-windows-8-1-upgrade/</guid>
      <description>So, after upgrading from Windows 8 to Windows 8.1, everything seemed smooth for a while. Until I realized that Tortoise Git had stopped working. It just would&amp;rsquo;t open, not through any shortcut or method. The worse is, when I tried to uninstall or repair it, I just got an error message saying:
There is a problem with this Windows Installer package. A DLL required for this install to complete could not be run.</description>
    </item>
    
    <item>
      <title>Give your git graph some bubbles</title>
      <link>http://rodrigodumont.com/2013/10/21/give-your-git-graph-some-bubbles/</link>
      <pubDate>Mon, 21 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rodrigodumont.com/2013/10/21/give-your-git-graph-some-bubbles/</guid>
      <description>The concept of a Version Control System is ususally misunderstood by most people. It isn&amp;rsquo;t just about keeping track o what you do. Most of all, it is about telling the story of a system&amp;rsquo;s development. It should be easily readable and undestandable by the whole team. It should have well defined chapters and lead the reader through what happened.
Which would you rather deal with? An intertwined graph with crossing edges and hard to follow lines:</description>
    </item>
    
    <item>
      <title>Fluent mocking for unit tests</title>
      <link>http://rodrigodumont.com/2013/09/26/fluent-mocking-for-unit-tests/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rodrigodumont.com/2013/09/26/fluent-mocking-for-unit-tests/</guid>
      <description>&lt;p&gt;If you seriously write &lt;strong&gt;unit tests in C#&lt;/strong&gt;, then I&amp;rsquo;m sure that you have sometimes come to a point where there are just too many, or perhaps too complex mocks in your code. When that happens, you can almost feel yourself giving in to the dark side and using an actual implementation just to avoid all the mess of &lt;strong&gt;setting up mocks&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>