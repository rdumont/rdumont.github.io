<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>unit-tests on Rodrigo Dumont</title><link>http://rodrigodumont.com/tags/unit-tests/</link><description>Recent content in unit-tests on Rodrigo Dumont</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><copyright>Copyright Rodrigo Dumont Â© 2020</copyright><lastBuildDate>Thu, 26 Sep 2013 00:00:00 +0000</lastBuildDate><atom:link href="http://rodrigodumont.com/tags/unit-tests/index.xml" rel="self" type="application/rss+xml"/><item><title>Fluent mocking for unit tests</title><link>http://rodrigodumont.com/2013/09/26/fluent-mocking-for-unit-tests/</link><pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate><guid>http://rodrigodumont.com/2013/09/26/fluent-mocking-for-unit-tests/</guid><description>&lt;p>If you seriously write &lt;strong>unit tests in C#&lt;/strong>, then I'm sure that you have sometimes come to a point where there are just too many, or perhaps too complex mocks in your code. When that happens, you can almost feel yourself giving in to the dark side and using an actual implementation just to avoid all the mess of &lt;strong>setting up mocks&lt;/strong>.&lt;/p></description></item></channel></rss>